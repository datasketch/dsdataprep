}
if (info_var$hdtype == "list") {
df <- filter_list(df, filter_var, info_var$id, .id = .id)
}
if (info_var$hdtype == "Cat") {
df <- df |> dplyr::filter(!!dplyr::sym(info_var$id) %in% filter_var)
}
}
}
df
}, .init = data)
special_placeholder = NULL
.id = NULL
df <- purrr::reduce(seq_along(var_inputs), function(df, .x) {
if (!is.null(var_inputs[[.x]]) && !setequal(var_inputs[[.x]], "")) {
other_condition <- !is.null(special_placeholder) && setequal(var_inputs[[.x]], special_placeholder)
if (!other_condition) {
name_var <- names(var_inputs)[.x]
info_var <- dic |> dplyr::filter(id %in% name_var)
filter_var <- var_inputs[[.x]]
if (info_var$hdtype == "Dat" || info_var$hdtype == "Num") {
df <- filter_ranges(df, range = filter_var, by = info_var$id)
}
if (info_var$hdtype == "list") {
df <- filter_list(df, filter_var, info_var$id, .id = .id)
}
if (info_var$hdtype == "Cat") {
df <- df |> dplyr::filter(!!dplyr::sym(info_var$id) %in% filter_var)
}
}
}
df
}, .init = data)
View(df)
View(data)
View(df)
devtools::load_all(".")
devtools::load_all(".")
devtools::install_github("datasketch/paletero")
devtools::load_all(".")
devtools::load_all(".")
data <- iris
dic <- homodatum::create_dic(data)
names(dic) <- tolower(names(dic))
names(data) <- dic$id
var_inputs <- list("species" = c("versicolor", "virginica" ),
"sepal_length"= c(4, 5))
special_placeholder = NULL
.id = NULL
if (is.null(data) || is.null(dic)) return()
if (is.null(var_inputs) || !is.list(var_inputs)) return(data)
df <- purrr::reduce(seq_along(var_inputs), function(df, .x) {
if (!is.null(var_inputs[[.x]]) && !setequal(var_inputs[[.x]], "")) {
other_condition <- !is.null(special_placeholder) && setequal(var_inputs[[.x]], special_placeholder)
if (!other_condition) {
name_var <- names(var_inputs)[.x]
info_var <- dic |> dplyr::filter(id %in% name_var)
filter_var <- var_inputs[[.x]]
if (info_var$hdtype == "Dat" || info_var$hdtype == "Num") {
df <- filter_ranges(df, range = filter_var, by = info_var$id)
}
if (info_var$hdtype == "list") {
df <- filter_list(df, filter_var, info_var$id, .id = .id)
}
if (info_var$hdtype == "Cat") {
df <- df |> dplyr::filter(!!dplyr::sym(info_var$id) %in% filter_var)
}
}
}
df
}, .init = data)
filter_ranges <- function(data, range, by) {
if (is.null(data)) return()
min_date <- min(data[[by]], na.rm = TRUE)
max_date <- max(data[[by]], na.rm = TRUE)
if (length(range) == 2) {
if (min_date == range[1] & max_date == range[2]) {
data_filter <- data
} else {
print(range)
data_filter <- data |>
dplyr::filter(!!dplyr::sym(by) >= range[1] &
!!dplyr::sym(by) <= range[2])
}
} else {
data_filter <-  data |>
dplyr::filter(!!dplyr::sym(by) == range)
}
data_filter
}
df <- purrr::reduce(seq_along(var_inputs), function(df, .x) {
if (!is.null(var_inputs[[.x]]) && !setequal(var_inputs[[.x]], "")) {
other_condition <- !is.null(special_placeholder) && setequal(var_inputs[[.x]], special_placeholder)
if (!other_condition) {
name_var <- names(var_inputs)[.x]
info_var <- dic |> dplyr::filter(id %in% name_var)
filter_var <- var_inputs[[.x]]
if (info_var$hdtype == "Dat" || info_var$hdtype == "Num") {
df <- filter_ranges(df, range = filter_var, by = info_var$id)
}
if (info_var$hdtype == "list") {
df <- filter_list(df, filter_var, info_var$id, .id = .id)
}
if (info_var$hdtype == "Cat") {
df <- df |> dplyr::filter(!!dplyr::sym(info_var$id) %in% filter_var)
}
}
}
df
}, .init = data)
View(df)
View(data)
usethis::use_test("data-filter")
data <- iris
dic <- homodatum::create_dic(data)
names(dic) <- tolower(names(dic))
names(data) <- dic$id
var_inputs <- list("species" = c("versicolor", "virginica" ),
"sepal_length"= c(4, 5))
devtools::load_all(".")
devtools::load_all()
devtools::install_github("datasketch/paletero")
library(paletero)
devtools::load_all()
devtools::document()
devtools::install()
data <- iris
dic <- homodatum::create_dic(data)
names(dic) <- tolower(names(dic))
names(data) <- dic$id
data_result <- data_filter(data = data,
dic = dic,
var_inputs = list("species" = c("versicolor", "virginica" ),
"sepal_length"= c(4, 5)))
data_expected <- data |>
filter(species %in% c("versicolor", "virginica"),
sepal_length >= 4 & sepal_length <= 5)
expect_equal(data_result, data_expected)
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
library(paletero)
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all(".")
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
library(paletero)
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
library(paletero)
devtools::document()
devtools::install()
devtools::load_all()
library(paletero)
devtools::load_all()
devtools::document()
devtools::install()
data <- data.frame(name = c("A", "B", "C", NA), y = c(10, 20, 30, 5))
devtools::load_all(".")
library(paletero)
devtools::load_all(".")
data <- data.frame(name = c("A", "B", "C", NA), y = c(10, 20, 30, 5))
aggregation_data(data, agg = "sum",group_var = "name", to_agg = "y", agg_name = "Suma")
agg = "sum"
group_var = "name"
to_agg = "y"
agg_name = "Suma"
na_rm = TRUE
na_label = "(NA)"
percentage = FALSE
percentage_name = NULL
percentage_col = NUL
percentage_col = NULL
extra_col = FALSE
agg_extra = "sum"
extra_sep = ","
extra_group = NULL
collapse_columns = NULL
numeric_collapse_columns = NULL
extra_sep_collapse_columns = "-"
if (is.null(data)) stop("The data object must be specified")
if (is.null(group_var)) stop("The pooling variable(s) must be specified.")
class_data <- class(data)
..percentage <- NULL
if ("fringe" %in% class_data) data <- data$data
if (!is.null(na_label)) {
if (sum(is.na(data[,group_var])) > 0) {
data[,group_var] <- purrr::map(data[,group_var], ~as.character(.x)) |>
dplyr::bind_rows()
data[,group_var][is.na(data[,group_var])] <- na_label
}
}
na_label
group_var
data[,group_var][is.na(data[,group_var])]
if (!is.null(na_label)) {
if (sum(is.na(data[,group_var])) > 0) {
data[,group_var] <- purrr::map(data[,group_var], ~as.character(.x)) |>
dplyr::bind_rows()
} else {
data[,group_var][is.na(data[,group_var])] <- na_label
}
}
sum(is.na(data[,group_var]))
if (!is.null(na_label)) {
if (sum(is.na(data[,group_var])) > 1) {
data[,group_var] <- purrr::map(data[,group_var], ~as.character(.x)) |>
dplyr::bind_rows()
} else {
data[,group_var][is.na(data[,group_var])] <- na_label
}
}
data
data <- data.frame(name = c("A", "B", "C", NA), cat2 = c("d", "ss", NA, "asd"), y = c(10, 20, 30, 5))
group_bar <- c("name", "cat2")
sum(is.na(data[,group_var]))
data[,group_var]
group_var <- c("name", "cat2")
sum(is.na(data[,group_var]))
purrr::map(data[,group_var], ~as.character(.x)) |>
dplyr::bind_rows()
purrr::map(data[,group_var], ~as.character(.x))
purrr::map(data[,group_var], ~is.na[as.character(.x)] <- na_label)
purrr::map(data[,group_var], function(.x) is.na[as.character(.x)] <- na_label)
is.na(data[,group_bar])
is.na(data[,group_bar]) <- na_label
data
purrr::map(data[,group_var], ~is.na(as.character(.x)) <- na_label)
purrr::map(data[,group_var], ~is.na(as.character(.x)) <- na_label)
purrr::map(data[,group_var], function(.x) {
is.na(as.character(.x))
})
purrr::map(data[,group_var], function(.x) {
data[is.na(as.character(.x))] <- "sdd"
})
purrr::map(data[,group_var], function(.x) {
data[, group_bar][is.na(as.character(.x))]
})
purrr::map(data[,group_var], function(.x) {
is.na(as.character(.x))
})
purrr::map(data[,group_var], function(.x) {
is.na(as.character(.x)) <- "sds"
})
purrr::map(data[,group_var], function(.x) {
.x
})
- purrr::map(group_var, function(.x) {
.x
})
purrr::map(group_var, function(.x) {
.x
})
purrr::map(group_var, function(.x) {
is.na(data[,.x])
})
purrr::map(group_var, function(.x) {
data[,.x][is.na(data[,.x])] <- "dsd"
})
purrr::map(group_var, function(.x) {
data[,.x][,is.na(data[,.x])] <- "dsd"
})
purrr::map(group_var, function(.x) {
data[,.x][is.na(data[,.x]),] <- "dsd"
})
purrr::map(group_var, function(.x) {
data[,.x][is.na(data[,.x])] <- na_label
})
data[,group_var][is.na(data[,group_var])]
purrr::map(group_var, function(.x) {
data[,.x][is.na(data[,.x])] <- na_label
}) |>
dplyr::bind_rows()
data |> dplyr::mutate_at(group_var, ~replace_na(.,na_label))
group_var
data |> dplyr::mutate_at(group_var, ~dplyr::replace_na(.,na_label))
data |> dplyr::mutate_at(group_var, ~tidyr::replace_na(.,na_label))
devtools::load_all()
devtools::document()
devtools::install()
xx <- aggregation_data(data, agg = "sum",group_var = "name", to_agg = "y", agg_name = "Suma")
devtools::load_all(".")
data <- data.frame(name = c("A", "B", "C", NA), y = c(10, 20, 30, 5))
xx <- aggregation_data(data, agg = "sum",group_var = "name", to_agg = "y", agg_name = "Suma")
xx
data <- xx
palette_colors = NULL
palette_type = "qualitative"
palette = NULL
devtools::load_all(".")
add_data_colors(xx, na_color = "#ccc")
na_color = "#ccc"
if (is.null(data)) {
stop("The data object must be specified")
}
if (is.null(palette_colors) && is.null(palette_type) && is.null(palette)) {
stop("No color information provided; either `palette_colors`, `palette_type`,
or `palette` must be specified")
}
class_data <- class(data)
if ("fringe" %in% class_data) data <- data$data
if ("..colors" %in% names(data)) {
return(data)
} else {
if (is.null(color_by)) {
column_color <- NULL
length_column_color <- 1
} else {
column_color <- unique(data[[color_by]])
length_column_color <- length(column_color)
}
if (is.null(palette_colors)) {
if (!is.null(palette)) {
palette_colors <- suppressWarnings(
paletero:::paleta(palette, n = length_column_color))
}
}
class_palette_colors <- class(palette_colors)
length_colors <- length(palette_colors)
if (length_colors != length_column_color) {
if (length_colors == 1) {
palette_colors <- rep(palette_colors, length_column_color)
} else if (length_colors > length_column_color) {
palette_colors <- palette_colors[1:length_column_color]
} else {
palette_colors <- suppressWarnings(
paletero:::paleta(palette_colors,
n = length_column_color,
type = palette_type)
)
}
}
if (is.null(column_color)) {
data$..colors <- palette_colors
} else {
data_colors  <- data.frame(..colors = palette_colors)
data_colors[[color_by]] <- column_color
data <- data |>
left_join(data_colors, by = color_by)
}
}
color_by <- "name"
if (is.null(data)) {
stop("The data object must be specified")
}
if (is.null(palette_colors) && is.null(palette_type) && is.null(palette)) {
stop("No color information provided; either `palette_colors`, `palette_type`,
or `palette` must be specified")
}
class_data <- class(data)
if ("fringe" %in% class_data) data <- data$data
if ("..colors" %in% names(data)) {
return(data)
} else {
if (is.null(color_by)) {
column_color <- NULL
length_column_color <- 1
} else {
column_color <- unique(data[[color_by]])
length_column_color <- length(column_color)
}
if (is.null(palette_colors)) {
if (!is.null(palette)) {
palette_colors <- suppressWarnings(
paletero:::paleta(palette, n = length_column_color))
}
}
class_palette_colors <- class(palette_colors)
length_colors <- length(palette_colors)
if (length_colors != length_column_color) {
if (length_colors == 1) {
palette_colors <- rep(palette_colors, length_column_color)
} else if (length_colors > length_column_color) {
palette_colors <- palette_colors[1:length_column_color]
} else {
palette_colors <- suppressWarnings(
paletero:::paleta(palette_colors,
n = length_column_color,
type = palette_type)
)
}
}
if (is.null(column_color)) {
data$..colors <- palette_colors
} else {
data_colors  <- data.frame(..colors = palette_colors)
data_colors[[color_by]] <- column_color
data <- data |>
left_join(data_colors, by = color_by)
}
}
data
if (is.null(data)) {
stop("The data object must be specified")
}
if (is.null(palette_colors) && is.null(palette_type) && is.null(palette)) {
stop("No color information provided; either `palette_colors`, `palette_type`,
or `palette` must be specified")
}
class_data <- class(data)
if ("fringe" %in% class_data) data <- data$data
if ("..colors" %in% names(data)) {
return(data)
} else {
if (is.null(color_by)) {
column_color <- NULL
length_column_color <- 1
} else {
column_color <- unique(data[[color_by]])
length_column_color <- length(column_color)
}
if (is.null(palette_colors)) {
if (!is.null(palette)) {
palette_colors <- suppressWarnings(
paletero:::paleta(palette, n = length_column_color))
}
}
class_palette_colors <- class(palette_colors)
length_colors <- length(palette_colors)
if (length_colors != length_column_color) {
if (length_colors == 1) {
palette_colors <- rep(palette_colors, length_column_color)
} else if (length_colors > length_column_color) {
palette_colors <- palette_colors[1:length_column_color]
} else {
palette_colors <- suppressWarnings(
paletero:::paleta(palette_colors,
n = length_column_color,
type = palette_type)
)
}
}
if (is.null(column_color)) {
data$..colors <- palette_colors
} else {
data_colors  <- data.frame(..colors = palette_colors)
data_colors[[color_by]] <- column_color
data <- data |>
left_join(data_colors, by = color_by)
}
}
column_color <- unique(data[[color_by]])
length_column_color <- length(column_color)
column_color
length_column_color
palette_colors <- suppressWarnings(
paletero:::paleta(palette, n = length_column_color))
palette
paletero:::paleta
palette <- "qualitative"
palette_colors <- suppressWarnings(
paletero:::paleta(palette, n = length_column_color))
palette_colors
class_palette_colors <- class(palette_colors)
length_colors <- length(palette_colors)
if (length_colors != length_column_color) {
if (length_colors == 1) {
palette_colors <- rep(palette_colors, length_column_color)
} else if (length_colors > length_column_color) {
palette_colors <- palette_colors[1:length_column_color]
} else {
palette_colors <- suppressWarnings(
paletero:::paleta(palette_colors,
n = length_column_color,
type = palette_type)
)
}
}
if (is.null(column_color)) {
data$..colors <- palette_colors
} else {
data_colors  <- data.frame(..colors = palette_colors)
data_colors[[color_by]] <- column_color
data <- data |>
left_join(data_colors, by = color_by)
}
data$..colors[data[[color_by]] == na_label]
na_label = "(NA)"
data$..colors[data[[color_by]] == na_label] <- na_color
data
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
