if (length_colors != length_column_color) {
if (length_colors == 1) {
palette_colors <- rep(palette_colors, length_column_color)
} else if (length_colors > length_column_color) {
palette_colors <- palette_colors[1:length_column_color]
} else {
palette_colors <- suppressWarnings(
paletero:::paleta(palette_colors,
n = length_column_color,
type = palette_type)
)
}
}
if (is.null(column_color)) {
data$..colors <- palette_colors
} else {
data_colors  <- data.frame(..colors = palette_colors)
data_colors[[color_by]] <- column_color
data <- data |>
left_join(data_colors, by = color_by)
}
}
data
if (is.null(data)) {
stop("The data object must be specified")
}
if (is.null(palette_colors) && is.null(palette_type) && is.null(palette)) {
stop("No color information provided; either `palette_colors`, `palette_type`,
or `palette` must be specified")
}
class_data <- class(data)
if ("fringe" %in% class_data) data <- data$data
if ("..colors" %in% names(data)) {
return(data)
} else {
if (is.null(color_by)) {
column_color <- NULL
length_column_color <- 1
} else {
column_color <- unique(data[[color_by]])
length_column_color <- length(column_color)
}
if (is.null(palette_colors)) {
if (!is.null(palette)) {
palette_colors <- suppressWarnings(
paletero:::paleta(palette, n = length_column_color))
}
}
class_palette_colors <- class(palette_colors)
length_colors <- length(palette_colors)
if (length_colors != length_column_color) {
if (length_colors == 1) {
palette_colors <- rep(palette_colors, length_column_color)
} else if (length_colors > length_column_color) {
palette_colors <- palette_colors[1:length_column_color]
} else {
palette_colors <- suppressWarnings(
paletero:::paleta(palette_colors,
n = length_column_color,
type = palette_type)
)
}
}
if (is.null(column_color)) {
data$..colors <- palette_colors
} else {
data_colors  <- data.frame(..colors = palette_colors)
data_colors[[color_by]] <- column_color
data <- data |>
left_join(data_colors, by = color_by)
}
}
column_color <- unique(data[[color_by]])
length_column_color <- length(column_color)
column_color
length_column_color
palette_colors <- suppressWarnings(
paletero:::paleta(palette, n = length_column_color))
palette
paletero:::paleta
palette <- "qualitative"
palette_colors <- suppressWarnings(
paletero:::paleta(palette, n = length_column_color))
palette_colors
class_palette_colors <- class(palette_colors)
length_colors <- length(palette_colors)
if (length_colors != length_column_color) {
if (length_colors == 1) {
palette_colors <- rep(palette_colors, length_column_color)
} else if (length_colors > length_column_color) {
palette_colors <- palette_colors[1:length_column_color]
} else {
palette_colors <- suppressWarnings(
paletero:::paleta(palette_colors,
n = length_column_color,
type = palette_type)
)
}
}
if (is.null(column_color)) {
data$..colors <- palette_colors
} else {
data_colors  <- data.frame(..colors = palette_colors)
data_colors[[color_by]] <- column_color
data <- data |>
left_join(data_colors, by = color_by)
}
data$..colors[data[[color_by]] == na_label]
na_label = "(NA)"
data$..colors[data[[color_by]] == na_label] <- na_color
data
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
700
700
700*484
url <- "https://datos-prueba.cdmx.gob.mx/api/3/action/"
linkInfo <- "e5a78deb-5c7a-4248-9979-3fb7801956ae"#"a83bb00d-ea9c-4a36-9b2e-7aa5015e64ef"
generalUrl <- paste0(url, "resource_show?id=")
print(generalUrl)
linkInfo <- paste0(generalUrl, linkInfo)
listConf <- jsonlite::fromJSON(linkInfo)
linkInfo
url <- "https://datos-prueba.cdmx.gob.mx/api/3/action/"
linkInfo <- "e0836676-6682-49b6-b8ce-f4ec5677042c"#"a83bb00d-ea9c-4a36-9b2e-7aa5015e64ef"
generalUrl <- paste0(url, "resource_show?id=")
print(generalUrl)
linkInfo <- paste0(generalUrl, linkInfo)
listConf <- jsonlite::fromJSON(linkInfo)
file <- listConf$result$url
#df1 <- read.table(file = file, nrows = 100,skip = 100, sep = ",")
df <- data.table::fread(file, na.strings = "NaN")
View(df)
df_c <- df |> group_by(alcaldia, sexo) |> summarise(count = n())
library(dplyr)
df_c <- df |> group_by(alcaldia, sexo) |> summarise(count = n())
View(df_c)
df_c <- df |>
group_by(alcaldia, sexo) |>
summarise(count = n()) |>
group_by(sexo) |>
mutate(perc = count/sum(count))
View(df_c)
df_c <- df |>
group_by(alcaldia, sexo) |>
summarise(count = n()) |>
ungroup() |>
group_by(sexo) |>
mutate(perc = count/sum(count))
df_c <- df |>
group_by(alcaldia, sexo) |>
summarise(count = n()) |>
ungroup() |>
group_by(alcaldia) |>
mutate(perc = count/sum(count)*100)
66.66667+33.33333
data <- df
percentage_col <- alcaldia
percentage_col <- "alcaldia"
group_var <- c("alcaldia", "sexo")
result <- data |>
group_by(across(all_of(group_var))) |>
summarise(count = n())
View(result)
to_percentage <- to_agg %||% agg_name %||% "count"
devtools::load_all(".")
to_percentage <- to_agg %||% agg_name %||% "count"
to_agg <- NULL\
to_agg <- NULL
agg_name <- NULL
to_percentage <- to_agg %||% agg_name %||% "count"
to_percentage
data <- ggplot2::diamonds
dataptc <- data |> select(cut, color, price)
data_result <- aggregation_data(data = dataptc,
agg = "mean", to_agg = "price",
group_var = c("cut", "color"),
percentage = TRUE,
percentage_col = "cut")
View(result)
View(data_result)
13.91556+11.94144+12.41066+13.74756+16.65460+15.19452+16.13565
# With percentage
data_result <- aggregation_data(data = data,
agg = "count",
to_agg = NULL,
agg_name = "Conteo",
group_var = c("cut", "color"),
percentage = TRUE)
View(data_result)
devtools::load_all()
devtools::document()
devtools::install()
View(data_result)
View(result)
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
data <- ggplot2::diamonds
data_result <- numeric_sort(data, col_num = "carat", sort = "desc")
devtools::load_all(".")
devtools::load_all(".")
data <- ggplot2::diamonds
data_result <- numeric_sort(data, col_num = "carat", sort = "desc")
View(data_result)
data_result <- numeric_sort(data, col_num = "carat", col_cat = "cut", sort = "asc")
View(data_result)
data_result <- numeric_sort(data, col_num = c("carat"), col_cat = c("cut", "clarity"), sort = "desc")
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
data_result <- add_group_index(data, c("cut", "color"), c("index", "index_leng"))
data <- ggplot2::diamonds
data_result <- add_group_index(data, c("cut", "color"), c("index", "index_leng"))
data_result <- dsdataprep:::add_group_index(data, c("cut", "color"), c("index", "index_leng"))
View(data_result)
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all(".")
data_result <- numeric_sort(data, col_num = c("carat"), col_cat = c("cut", "clarity"), sort = "desc")
View(data_result)
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all(".")
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all(".")
devtools::load_all(".")
data <- ggplot2::diamonds
data_result <- numeric_sort(data, col_num = "carat", sort = "desc")
data_result <- numeric_sort(data, col_num = c("carat"), col_cat = c("cut", "clarity"), sort = "desc")
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all(".")
devtools::load_all(".")
data_result <- numeric_sort(data, col_num = c("carat"), col_cat = c("cut", "color"), sort = "desc")
data <- ggplot2::diamonds
data_result <- numeric_sort(data, col_num = c("carat"), col_cat = c("cut", "color"), sort = "desc")
View(data_result)
df <- data |> group_by(color, cut) |> summarise(carat = sum(carat))
data_result <- numeric_sort(data, col_num = c("carat"), col_cat = c("cut", "color"), sort = "desc")
data_result <- numeric_sort(df, col_num = c("carat"), col_cat = c("cut", "color"), sort = "desc")
devtools::load_all(".")
data_result <- numeric_sort(df, col_num = c("carat"), col_cat = c("cut", "color"), sort = "desc")
devtools::load_all(".")
data_result <- numeric_sort(df, col_num = c("carat"), col_cat = c("cut", "color"), sort = "desc")
devtools::load_all(".")
data_result <- numeric_sort(df, col_num = c("carat"), col_cat = c("cut", "color"), sort = "desc")
devtools::load_all(".")
data_result <- numeric_sort(df, col_num = c("carat"), col_cat = c("cut", "color"), sort = "desc")
devtools::load_all(".")
data_result <- numeric_sort(df, col_num = c("carat"), col_cat = c("cut", "color"), sort = "desc")
devtools::load_all(".")
data_result <- numeric_sort(df, col_num = c("carat"), col_cat = c("cut", "color"), sort = "desc")
View(data_result)
devtools::load_all()
devtools::document()
devtools::install()
View(df)
devtools::load_all()
devtools::document()
devtools::install()
devtools::install_github("datasketch/geodato")
map_name <- "col_departments"
tj <- geodato::gd_tj(map_name)
data <- data.frame(depto = c("Antioquia", "quindio", "risaralda"), valor = 1:3)
geodato::gd_match(d = data, map_name = map_name)
devtools::load_all(".")
geodato::gd_match(d = data, map_name = map_name)
data <- data.frame(depto = c("Antio", "quino", "rialda"), valor = 1:3)
geodato::gd_match(d = data, map_name = map_name)
data <- tryCatch({
geodato::gd_match(d = data, map_name = map_name)
},
error = function(e) {
stop("no geographic variables are identified")
})
data <- data.frame(depto = c("Antioquia", "quindio", "risaralda"), valor = 1:3)
data <- tryCatch({
geodato::gd_match(d = data, map_name = map_name)
},
error = function(e) {
stop("no geographic variables are identified")
})
var <- "valo"
var <- "valor"
col <- geodato::parse_col(data, var)
col
col <- geodato::parse_col(data, NULL)
col
data$..var <- data[[col]]
col <- geodato::parse_col(data, var)
data$..var <- data[[col]]
data
geodato::parse_col
data <- data.frame(depto = c("Antioquia", "quindio", "risaralda"), valor = 1:3)
d <- tryCatch({
geodato::gd_match(d = data, map_name = map_name)
},
error = function(e) {
stop("no geographic variables are identified")
})
col <- geodato::parse_col(d, var)
d$..var <- d[[col]]
dgeo <- tj |>
dplyr::left_join(d, by = c(id = "..gd_id", name = "..gd_name"))
dgeo
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all(".")
map_name <- "col_departments"
tj <- geodato::gd_tj(map_name)
data <- data.frame(depto = c("5", "11", "8"), valor = 1:3)
geodato::gd_match(d = data, map_name = map_name)
geodato::gd_match_codes(data, map_name)
geodato::gd_match
?tryCatch
map_name <- "col_departments"
tj <- geodato::gd_tj(map_name)
data <- data.frame(depto = c("5", "11", "8"), valor = 1:3)
d <- tryCatch({
geodato::gd_match(d = data, map_name = map_name)
},
error = function(e) {
tryCatch({
geodato::gd_match_codes(d = data, map_name = map_name)
},
error = function(e) {
stop("no geographic variables are identified")
})
})
d
map_name <- "col_departments"
tj <- geodato::gd_tj(map_name)
data <- data.frame(depto = c(5, 11, 8), valor = 1:3)
d <- tryCatch({
geodato::gd_match(d = data, map_name = map_name)
},
error = function(e) {
tryCatch({
geodato::gd_match_codes(d = data, map_name = map_name)
},
error = function(e) {
stop("no geographic variables are identified")
})
})
d
var <- valor
var <- "valor"
map_name <- "col_departments"
data <- data.frame(depto = c(5, 11, 8), valor = 1:3)
d <- tryCatch({
geodato::gd_match(d = data, map_name = map_name)
},
error = function(e) {
tryCatch({
geodato::gd_match_codes(d = data, map_name = map_name)
},
error = function(e) {
stop("no geographic variables are identified")
})
})
col <- geodato::parse_col(d, var)
col
geodato::parse_col(d, col = NULL)
class(d[[col]])
prep_tooltip
var <- "valor"
map_name <- "col_departments"
data <- data.frame(depto = c(5, 11, 8), valor = 1:3)
d <- data
d$..labels <- prep_tooltip(data = d
)
d
d <- tryCatch({
geodato::gd_match(d = d, map_name = map_name)
},
error = function(e) {
tryCatch({
geodato::gd_match_codes(d = d, map_name = map_name)
},
error = function(e) {
stop("no geographic variables are identified")
})
})
d
if (!is.null(var)) {
col <- geodato::parse_col(d, var)
if (class(d[[col]]) %in% c("character", "factor"))
d$..var <- d[[col]]
}
d
!is.null(var)
col <- geodato::parse_col(d, var)
col
categorias <- c("Rojo", "Verde", "Azul", "Rojo", "Verde")
# Recodificar las categorías a números enteros
recodificado <- as.integer(factor(categorias))
recodificado
devtools::load_all()
devtools::document()
devtools::install()
paletero::paletero(c("a", "b", "c", "d"), palette = c("red", "blue"))
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all(".")
arrange(c(1:100))
sort(setNames(c("a", "b"), c("z", "i")))
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::dev_mode()
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
rev("a")
rev(c("a", "b"))
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
300*349
300*490
?factor
x <- c("Man", "Male", "Man", "Lady", "Female")
## Map from 4 different values to only two levels:
(xf <- factor(x, levels = c("Male", "Man" , "Lady",   "Female")))
as.numeric(xf)
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
